# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "3001:3001"
    volumes:
      - ./api-gateway:/usr/src/app
    command: ["node", "server.js"]
  
  file-upload-service:
    build:
      context: ./backend/file-upload-service
    ports:
      - "3005:3005"
    volumes:
      - ./backend/file-upload-service:/usr/src/app
      - ./backend/file-upload-service/uploads:/usr/src/app/uploads
    command: ["node", "server.js"]

  print-service:
    build:
      context: ./backend/print-service
    ports:
      - "3006:3006"
    volumes:
      - ./backend/print-service:/usr/src/app
    command: ["node", "server.js"]

  surat-keluar-service:
    build:
      context: ./backend/surat-keluar-service
    ports:
      - "3004:3004"
    volumes:
      - ./backend/surat-keluar-service:/usr/src/app
    command: ["node", "server.js"]

  surat-masuk-service:
    build:
      context: ./backend/surat-masuk-service
    ports:
      - "3003:3003"
    volumes:
      - ./backend/surat-masuk-service:/usr/src/app
    command: ["node", "server.js"]

  user-service:
    build:
      context: ./backend/user-service
    ports:
      - "3002:3002"
    volumes:
      - ./backend/user-service:/usr/src/app
    command: ["node", "server.js"]

  frontend:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - "8080:8080"
    user: root
    command: ["npm", "run", "serve"]
    volumes:
      - .:/usr/src/app



# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

